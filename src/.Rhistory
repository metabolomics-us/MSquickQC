col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
geom_text_repel(data = p9[which(p9$out == 1),
],
aes(label = label,
size = 12),
segment.size = 0.1,
segment.color = "grey",
show.legend = F) +
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pc1 <- pcp1 +
scale_fill_manual(values = col7)
pc1
pcp1 <- ggplot(p9,
aes(x=PC1,
y=PC2,
col = `sampleType`,
fill = `sampleType`)
) +
### Scatter
geom_point(shape=21,
col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pc1 <- pcp1 +
scale_fill_manual(values = col7)
pc1
?geom_text_repel
pcp1 <- ggplot(p9,
aes(x=PC1,
y=PC2,
col = `sampleType`,
fill = `sampleType`)
) +
### Scatter
geom_point(shape=21,
col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
geom_text_repel(data = p9[which(p9$out == 1),
],
aes(label = label,
size = 12),
segment.size = 0.1,
segment.color = "grey",
show.legend = F,
na.rm = T) +
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pc1 <- pcp1 +
scale_fill_manual(values = col7)
pc1
pcp1 <- ggplot(p9,
aes(x=PC1,
y=PC2,
col = `sampleType`,
fill = `sampleType`)
) +
### Scatter
geom_point(shape=21,
col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
geom_text_repel(data = subset(p9,
out == 1),
aes(label = subset(p9$label,
out == 1),
size = 12),
segment.size = 0.1,
segment.color = "grey",
show.legend = F,
na.rm = T) +
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pc1 <- pcp1 +
scale_fill_manual(values = col7)
pc1
p9.out <- subset(p9,
out == 1)
View(p9.out)
pcp1 <- ggplot(p9,
aes(x=PC1,
y=PC2,
col = `sampleType`,
fill = `sampleType`)
) +
### Scatter
geom_point(shape=21,
col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
geom_text_repel(data = p9.out,
aes(label = p9.out$label,
size = 12),
segment.size = 0.1,
segment.color = "grey",
show.legend = F,
na.rm = T) +
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pc1 <- pcp1 +
scale_fill_manual(values = col7)
pc1
p9.out
nrow(p9.out)
pcp1 <- ggplot(p9,
aes(x=PC1,
y=PC2,
col = `sampleType`,
fill = `sampleType`)
) +
### Scatter
geom_point(shape=21,
col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
ifelse(nrow(p9.out) = 0,
NULL,
geom_text_repel(data = subset(p9,
out == 1),
aes(label = label,
size = 12),
segment.size = 0.1,
segment.color = "grey",
show.legend = F,
na.rm = T)
) +
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pcp1 <- ggplot(p9,
aes(x=PC1,
y=PC2,
col = `sampleType`,
fill = `sampleType`)
) +
### Scatter
geom_point(shape=21,
col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
geom_text_repel(data = subset(p9,
out == 1),
aes(label = label,
size = 12),
segment.size = 0.1,
segment.color = "grey",
show.legend = F,
na.rm = T)  +
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pc1 <- pcp1 +
scale_fill_manual(values = col7)
pc1
pcp1 <- ggplot(p9,
aes(x=PC1,
y=PC2,
col = `sampleType`,
fill = `sampleType`)
) +
### Scatter
geom_point(shape=21,
col="black",
size = 3,
alpha = 0.8) +
### Outlier labels
geom_text_repel(data = ifelse(nrow(p9.out) == 0,
NULL,
subset(p9,
out == 1)
),
aes(label = label,
size = 12),
segment.size = 0.1,
segment.color = "grey",
show.legend = F,
na.rm = T)  +
### Axis labels
labs(y = pc2_lab(vrc[2]),
x = pc1_lab(vrc[1])
) +
### Theme
thm1
pc1 <- pcp1 +
scale_fill_manual(values = col7)
pc1
p9.out <- ifelse(nrow(p9.out) == 0,
NULL,
p9.out)
runApp('QC_report_app_v3.R')
p9.out <- subset(p9,
out == 1)
test <- ifelse(nrow(p9.out) == 0,
TRUE,
FALSE)
# default parameters for plot output
knitr::opts_chunk$set(echo = F, warning = F,
message = F,
dpi = 500,
fig.width = 7)
library(tidyverse)
# conditions
eval_msi_class <- params$class_msi
eval_blank <- !eval_msi_class
# prepare input for PCA (data frame, qc1, mdata + 1)
pca <- function(df,
q3,
md1) {
## remove method blanks (if present)
d_pc_in <<- df %>%
filter(sampleType != q3)
## change group variables to factor instead of character
d_pc_in$`sampleType` <- as.factor(d_pc_in$`sampleType`)
## separate metadata and conduct PCA
pc_in <<- prcomp(d_pc_in[,md1:ncol(d_pc_in)],
scale. = T)
## extract first two PCs (for plotting)
vrc <- summary(pc_in)$importance[2,]
PC1 <- pc_in$x[, 1]
PC2 <- pc_in$x[, 2]
p9 <<- cbind(d_pc_in,
PC1,
PC2)
## functions to name plot axes
pc1_lab <- function(val,
digits = 2,
format = 'f') {
paste0('PC1 (',
formatC(100*val,
format = format,
digits = digits),
'%)')
}
pc2_lab <- function(val,
digits = 2,
format = 'f') {
paste0('PC2 (',
formatC(100*val,
format = format,
digits = digits),
'%)')
}
## OUTLIER DETECTION ##
## Determine samples + or - 3 SD from mean mTIC of each group
p9$Index <- seq.int(1:nrow(p9))
## Calculate mTIC
p9 <- p9 %>%
dplyr::select(Index,
PC1,
PC2,
everything()
)
p9$mTIC <- apply(p9[,7:ncol(p9)],
MARGIN = 1,
function (x) sum(x)
)
## Calculate mean and SD
sval <- p9 %>%
group_by(sampleType) %>%
summarise_at(vars(mTIC),
list(mean = mean,
sdev = sd)
)
sval$sd.min <- sval$mean -
3*sval$sdev
sval$sd.max <- sval$mean +
3*sval$sdev
## Isolate each sample group
slv <-  function(df,
x) {
dfn <<- df %>%
filter(sampleType == x)
}
### Experimental samples
slv(sval,
"Sample")
q1v <- dfn
slv(p9,
"Sample")
v1 <- dfn
### 1st quality control
slv(sval,
qc1)
q2v <- dfn
slv(p9,
qc1)
v2 <- dfn
### 2nd quality control
slv(sval,
qc2)
q3v <- dfn
slv(p9,
qc2)
v3 <- dfn
## Mark outliers for each sample group
v1$out <- with(v1,
ifelse(mTIC > q1v$sd.max |
mTIC < q1v$sd.min,
1,
0)
)
v2$out <- with(v2,
ifelse(mTIC > q2v$sd.max &
mTIC < q2v$sd.min,
1,
0)
)
v3$out <- with(v3,
ifelse(mTIC > q3v$sd.max &
mTIC < q3v$sd.min,
1,
0)
)
## Calculate number of standard deviations and combine into one df
v1$nsd <- abs(v1$mTIC - q1v$mean)/
q1v$sdev
v2$nsd <- abs(v2$mTIC - q2v$mean)/
q2v$sdev
v3$nsd <- abs(v3$mTIC - q3v$mean)/
q3v$sdev
p9 <<- rbind(v1,
v2,
v3)
p9.out <<- subset(p9,
out == 1)
}
pca(df1,
qc3,
4)
# prepare input for PCA (data frame, qc1, mdata + 1)
pca <- function(df,
q3,
md1) {
## remove method blanks (if present)
d_pc_in <<- df %>%
filter(sampleType != q3)
## change group variables to factor instead of character
d_pc_in$`sampleType` <- as.factor(d_pc_in$`sampleType`)
## separate metadata and conduct PCA
pc_in <<- prcomp(d_pc_in[,md1:ncol(d_pc_in)],
scale. = T)
## extract first two PCs (for plotting)
vrc <- summary(pc_in)$importance[2,]
PC1 <- pc_in$x[, 1]
PC2 <- pc_in$x[, 2]
p9 <<- cbind(d_pc_in,
PC1,
PC2)
## functions to name plot axes
pc1_lab <- function(val,
digits = 2,
format = 'f') {
paste0('PC1 (',
formatC(100*val,
format = format,
digits = digits),
'%)')
}
pc2_lab <- function(val,
digits = 2,
format = 'f') {
paste0('PC2 (',
formatC(100*val,
format = format,
digits = digits),
'%)')
}
## OUTLIER DETECTION ##
## Determine samples + or - 3 SD from mean mTIC of each group
p9$Index <- seq.int(1:nrow(p9))
## Calculate mTIC
p9 <- p9 %>%
dplyr::select(Index,
PC1,
PC2,
everything()
)
p9$mTIC <- apply(p9[,7:ncol(p9)],
MARGIN = 1,
function (x) sum(x)
)
## Calculate mean and SD
sval <- p9 %>%
group_by(sampleType) %>%
summarise_at(vars(mTIC),
list(mean = mean,
sdev = sd)
)
sval$sd.min <- sval$mean -
3*sval$sdev
sval$sd.max <- sval$mean +
3*sval$sdev
## Isolate each sample group
slv <-  function(df,
x) {
dfn <<- df %>%
filter(sampleType == x)
}
### Experimental samples
slv(sval,
"Sample")
q1v <- dfn
slv(p9,
"Sample")
v1 <- dfn
### 1st quality control
slv(sval,
qc1)
q2v <- dfn
slv(p9,
qc1)
v2 <- dfn
### 2nd quality control
slv(sval,
qc2)
q3v <- dfn
slv(p9,
qc2)
v3 <- dfn
## Mark outliers for each sample group
v1$out <- with(v1,
ifelse(mTIC > q1v$sd.max |
mTIC < q1v$sd.min,
1,
0)
)
v2$out <- with(v2,
ifelse(mTIC > q2v$sd.max &
mTIC < q2v$sd.min,
1,
0)
)
v3$out <- with(v3,
ifelse(mTIC > q3v$sd.max &
mTIC < q3v$sd.min,
1,
0)
)
## Calculate number of standard deviations and combine into one df
v1$nsd <- abs(v1$mTIC - q1v$mean)/
q1v$sdev
v2$nsd <- abs(v2$mTIC - q2v$mean)/
q2v$sdev
v3$nsd <- abs(v3$mTIC - q3v$mean)/
q3v$sdev
p9 <<- rbind(v1,
v2,
v3)
p9.out <<- p9[which(p9$out == 1),
]
}
pca(df1,
qc3,
4)
## Update params
params$outlier <- ifelse(nrow(p9.out) == 0,
FALSE,
TRUE)
params$no_outlier <- ifelse(nrow(p9.out) == 0,
TRUE,
FALSE)
eval_outlier <- params$outlier
eval_no_outlier <- params$no_outlier
runApp('QC_report_app_v3.R')
runApp('QC_report_app_v3.R')
runApp('QC_report_app_v3.R')
runApp('QC_report_app_v3.R')
runApp('QC_report_app_v3.R')
runApp('QC_report_app_v3.R')
runApp('QC_report_app_v3.R')
library(shiny); runApp('QC_report_app_v3.R')
setRepositories()
runApp('QC_report_app_v3.R')
runApp('QC_report_app_v3.R')
